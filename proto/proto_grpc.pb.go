// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: proto/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MutualExclusionServiceClient is the client API for MutualExclusionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MutualExclusionServiceClient interface {
	Election(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ElectionResult, error)
	SetCoordinator(ctx context.Context, in *ElectionResult, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type mutualExclusionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMutualExclusionServiceClient(cc grpc.ClientConnInterface) MutualExclusionServiceClient {
	return &mutualExclusionServiceClient{cc}
}

func (c *mutualExclusionServiceClient) Election(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ElectionResult, error) {
	out := new(ElectionResult)
	err := c.cc.Invoke(ctx, "/grpcexample.MutualExclusionService/Election", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutualExclusionServiceClient) SetCoordinator(ctx context.Context, in *ElectionResult, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/grpcexample.MutualExclusionService/SetCoordinator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MutualExclusionServiceServer is the server API for MutualExclusionService service.
// All implementations must embed UnimplementedMutualExclusionServiceServer
// for forward compatibility
type MutualExclusionServiceServer interface {
	Election(context.Context, *EmptyMessage) (*ElectionResult, error)
	SetCoordinator(context.Context, *ElectionResult) (*EmptyMessage, error)
	mustEmbedUnimplementedMutualExclusionServiceServer()
}

// UnimplementedMutualExclusionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMutualExclusionServiceServer struct {
}

func (UnimplementedMutualExclusionServiceServer) Election(context.Context, *EmptyMessage) (*ElectionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Election not implemented")
}
func (UnimplementedMutualExclusionServiceServer) SetCoordinator(context.Context, *ElectionResult) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCoordinator not implemented")
}
func (UnimplementedMutualExclusionServiceServer) mustEmbedUnimplementedMutualExclusionServiceServer() {
}

// UnsafeMutualExclusionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MutualExclusionServiceServer will
// result in compilation errors.
type UnsafeMutualExclusionServiceServer interface {
	mustEmbedUnimplementedMutualExclusionServiceServer()
}

func RegisterMutualExclusionServiceServer(s grpc.ServiceRegistrar, srv MutualExclusionServiceServer) {
	s.RegisterService(&MutualExclusionService_ServiceDesc, srv)
}

func _MutualExclusionService_Election_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutualExclusionServiceServer).Election(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcexample.MutualExclusionService/Election",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutualExclusionServiceServer).Election(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MutualExclusionService_SetCoordinator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectionResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutualExclusionServiceServer).SetCoordinator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcexample.MutualExclusionService/SetCoordinator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutualExclusionServiceServer).SetCoordinator(ctx, req.(*ElectionResult))
	}
	return interceptor(ctx, in, info, handler)
}

// MutualExclusionService_ServiceDesc is the grpc.ServiceDesc for MutualExclusionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MutualExclusionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcexample.MutualExclusionService",
	HandlerType: (*MutualExclusionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Election",
			Handler:    _MutualExclusionService_Election_Handler,
		},
		{
			MethodName: "SetCoordinator",
			Handler:    _MutualExclusionService_SetCoordinator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}
